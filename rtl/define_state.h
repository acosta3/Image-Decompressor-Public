`ifndef DEFINE_STATE

// for top state - we have more states than needed
typedef enum logic [4:0] {
	S_IDLE,
	S_UART_RX,
	S_M1,
	S_M2,
	S_M3
} top_state_type;

typedef enum logic [1:0] {
	S_RXC_IDLE,
	S_RXC_SYNC,
	S_RXC_ASSEMBLE_DATA,
	S_RXC_STOP_BIT
} RX_Controller_state_type;

typedef enum logic [2:0] {
	S_US_IDLE,
	S_US_STRIP_FILE_HEADER_1,
	S_US_STRIP_FILE_HEADER_2,
	S_US_START_FIRST_BYTE_RECEIVE,
	S_US_WRITE_FIRST_BYTE,
	S_US_START_SECOND_BYTE_RECEIVE,
	S_US_WRITE_SECOND_BYTE
} UART_SRAM_state_type;

typedef enum logic [3:0] {
	S_VS_WAIT_NEW_PIXEL_ROW,
	S_VS_NEW_PIXEL_ROW_DELAY_1,
	S_VS_NEW_PIXEL_ROW_DELAY_2,
	S_VS_NEW_PIXEL_ROW_DELAY_3,
	S_VS_NEW_PIXEL_ROW_DELAY_4,
	S_VS_NEW_PIXEL_ROW_DELAY_5,
	S_VS_FETCH_PIXEL_DATA_0,
	S_VS_FETCH_PIXEL_DATA_1,
	S_VS_FETCH_PIXEL_DATA_2,
	S_VS_FETCH_PIXEL_DATA_3
} VGA_SRAM_state_type;


typedef enum logic[6:0]{
    S_LEADIN_0,
    S_LEADIN_1,
    S_LEADIN_2,
    S_LEADIN_3,
    S_LEADIN_4,
    S_LEADIN_5,
    S_LEADIN_6,
    S_LEADIN_7,
    S_LEADIN_8,
    S_LEADIN_9,
    S_LEADIN_10,
    S_LEADIN_11,
    S_LEADIN_12,
    S_LEADIN_13,
    S_LEADIN_14,
    S_LEADIN_15,
    S_LEADIN_16,
    S_LEADIN_17,
    S_LEADIN_18,
    CC_0,
    CC_1,
    CC_2,
    CC_3,
    CC_4,
    CC_5,
    CC_6,
    S_LEADOUT_0,
    S_LEADOUT_1,
    S_LEADOUT_2,
    S_LEADOUT_3,
    S_LEADOUT_4,
    S_LEADOUT_5,
    S_LEADOUT_6,
    S_LEADOUT_7,
    S_LEADOUT_8,
    S_LEADOUT_9,
    S_LEADOUT_10,
    S_LEADOUT_11,
    S_LEADOUT_12,
    S_LEADOUT_13,
    S_LEADOUT_14,
    S_LEADOUT_15,
    S_LEADOUT_16,
    S_LEADOUT_17

} M1_state_type;


typedef enum logic[8:0]{
	S_IDLE_M2,
	 S_LEADIN_Fs_0,
    S_LEADIN_Fs_1,
    S_LEADIN_Fs_2,
    S_LEADIN_Fs_3,
    S_LEADIN_Fs_4,
    S_LEADIN_Fs_5,
    S_LEADIN_Fs_6,
    S_LEADIN_Fs_7,
    S_LEADIN_Fs_8,
    S_LEADIN_Fs_9,
    S_LEADIN_Fs_10,
    S_LEADIN_Fs_11,
    S_LEADIN_Fs_12,
    S_LEADIN_Fs_13,
    S_LEADIN_Fs_14,
    S_LEADIN_Fs_15,
    S_LEADIN_Fs_16,
    S_LEADIN_Fs_17,
    S_LEADIN_Fs_18,
	 S_LEADIN_CC_Fs,
    CC_Fs_0,
    CC_Fs_1,
    CC_Fs_2,
    CC_Fs_3,
    CC_Fs_4,
    CC_Fs_5,
    CC_Fs_6,
    S_LEADOUT_Fs_0,
    S_LEADOUT_Fs_1,
    S_LEADOUT_Fs_2,
    S_LEADOUT_Fs_3,
    S_LEADOUT_Fs_4,
    S_LEADOUT_Fs_5,
    S_LEADOUT_Fs_6,
    S_LEADOUT_Fs_7,
    S_LEADOUT_Fs_8,
    S_LEADOUT_Fs_9,
    S_LEADOUT_Fs_10,
    S_LEADOUT_Fs_11,
    S_LEADOUT_Fs_12,
    S_LEADOUT_Fs_13,
    S_LEADOUT_Fs_14,
    S_LEADOUT_Fs_15,
    S_LEADOUT_Fs_16,
    S_LEADOUT_Fs_17,
	 S_WS_CT_LI_WRITE_LAST_S,
	 
	 
	 S_LEADIN_CT_0_0,
	 S_LEADIN_CT_0,
    S_LEADIN_CT_1,
    S_LEADIN_CT_2,
    S_LEADIN_CT_3,
    S_LEADIN_CT_4,
    S_LEADIN_CT_5,
    S_LEADIN_CT_6,
    S_LEADIN_CT_7,
    S_LEADIN_CT_8,
    S_LEADIN_CT_9,
    S_LEADIN_CT_10,
    S_LEADIN_CT_11,
    S_LEADIN_CT_12,
    S_LEADIN_CT_13,
    S_LEADIN_CT_14,
    S_LEADIN_CT_15,
    S_LEADIN_CT_16,
    S_LEADIN_CT_17,
    S_LEADIN_CT_18,
    S_CC_CT_0,
    S_CC_CT_1,
    S_CC_CT_2,
    S_CC_CT_3,
    S_CC_CT_4,
    S_CC_CT_5,
    S_CC_CT_6,
	 S_CC_CT_7,
	 S_CC_CT_LO_0,
	 S_CC_CT_LO_1,
    S_LEADOUT_CT_0,
    S_LEADOUT_CT_1,
    S_LEADOUT_CT_2,
    S_LEADOUT_CT_3,
    S_LEADOUT_CT_4,
    S_LEADOUT_CT_5,
    S_LEADOUT_CT_6,
    S_LEADOUT_CT_7,
    S_LEADOUT_CT_8,
    S_LEADOUT_CT_9,
    S_LEADOUT_CT_10,
    S_LEADOUT_CT_11,
    S_LEADOUT_CT_12,
    S_LEADOUT_CT_13,
    S_LEADOUT_CT_14,
    S_LEADOUT_CT_15,
    S_LEADOUT_CT_16,
    S_LEADOUT_CT_17,
	 
	 
	 S_WS_CT_LI_hold,
	 S_CS_FS_LI_0,
	 S_CS_FS_LI_1,
	 S_CS_FS_LI_2,
	 S_CS_FS_LI_3,
	 S_CS_FS_LI_4,
	 S_CS_FS_LI_5,
	 S_CS_FS_LI_6,
	 S_CS_FS_LI_7,
	 S_CS_FS_LI_8,
	 S_CS_FS_CC_0,
	 S_CS_FS_CC_1,
	 S_CS_FS_CC_2,
	 S_CS_FS_CC_3,
	 S_CS_FS_CC_4,
	 S_CS_FS_CC_5,
	 S_CS_FS_CC_6,
	 S_CS_FS_CC_7,
	 S_CS_FS_LO_0,
	 S_CS_FS_LO_1,
	 S_CS_FS_LO_2,
	 
	 
	 S_WS_CT_LI_0,
	 S_WS_CT_LI_1,
	 S_WS_CT_LI_2,
	 S_WS_CT_LI_3,
	 S_WS_CT_LI_4,
	 S_WS_CT_LI_5,
	 S_WS_CT_LI_6,
	 S_WS_CT_LI_7,
	 S_WS_CT_LI_8,
	 S_WS_CT_LI_9,
	 S_WS_CT_CC_0,
	 S_WS_CT_CC_1,
	 S_WS_CT_CC_2,
	 S_WS_CT_CC_3,
	 S_WS_CT_CC_4,
	 S_WS_CT_CC_5,
	 S_WS_CT_CC_6,
	 S_WS_CT_CC_7,
	 S_WS_CT_CC_8,
	 S_WS_CT_LO_0,
	 
	 S_LAST_WRITE_LI_0,
	 S_LAST_WRITE_LI_1,
	 S_LAST_WRITE_LI_2,
	 S_LAST_WRITE_LI_3,
	 S_LAST_WRITE_LO_0

} M2_state_type;

typedef enum logic[6:0]{
	S_IDLE_M3,
	S_THE_HUB,
   S_READ_16_BIT_1,
	S_READ_16_BIT_2,
	S_READ_16_BIT_3,
	S_READ_16_BIT_4,
	S_WRITE_WORD_2,
	S_WRITE_WORD_3,
	S_WRITE_WORD_4,
	S_00X,
	S_01X,
	S_100,
	S_101,
	S_110,
	S_111,
	S_ONE_DEL,
	S_READ_HEADER_0,
	S_READ_HEADER_1,
	S_READ_HEADER_2,
	S_READ_HEADER_3,
	S_READ_HEADER_4,
	S_DEQUANT

} M3_state_type;
parameter 
   VIEW_AREA_LEFT = 160,
   VIEW_AREA_RIGHT = 480,
   VIEW_AREA_TOP = 120,
   VIEW_AREA_BOTTOM = 360;

`define DEFINE_STATE 1
`endif
